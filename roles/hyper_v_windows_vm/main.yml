- name: Check if VHDX is already exists
  win_stat:
    path: "{{ template_vhdx_destination }}"
    get_checksum: false
  register: vhdx_exists

- name: Clone Template VHDX
  win_copy:
    src: "{{ template_vhdx_source }}"
    dest: "{{ template_vhdx_destination }}"
    force: false
    remote_src: true
  when: vhdx_exists.stat.exists == false

- name: Check if VM already exists
  ansible.windows.win_shell: |
    try {
      Get-VM -Name "{{ vm_name }}" -ErrorAction Stop
    }
    catch {
      Write-Output "{{ vm_name }} does not exist"
    }
  register: vm_exists

- name: Create new Hyper V VM
  ansible.windows.win_shell: |
    New-VM -Name "{{ vm_name }}" -MemoryStartupBytes {{ vm_memory }}GB -VHDPath "{{ template_vhdx_destination }}" -Generation 2 -SwitchName "{{ prod_vm_switch }}" -BootDevice VHD
  when: "'does not exist' in vm_exists.stdout"

- name: Set VM CPU count
  ansible.windows.win_shell: |
    Set-VM -Name "{{ vm_name }}" -ProcessorCount "{{ vm_cpu_count }}"

- name: Start new Hyper V VM
  ansible.windows.win_shell: |
    Start-VM -Name "{{ vm_name }}"

- name: Wait for VM to fully boot
  ansible.builtin.wait_for:
    timeout: 120
  delegate_to: localhost

- name: Gather IP address details
  ansible.windows.win_shell:
    Get-VM -Name "{{ vm_name }}" | Select-Object -ExpandProperty Networkadapters | Select-Object -Property @{n='IPAddresses';e={$_.IPAddresses | Where-Object { [IPAddress]::TryParse($_, [ref]$null) -and $_ -match '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$' -and $_ -notlike '*:*' } | Select-Object -First 1}}
  register: ip_address_result

- name: Set IP address as fact
  set_fact:
    vm_ip_address: "{{ ip_address_result.stdout_lines[3] | trim }}"
  delegate_to: localhost

- name: Update current host inventory
  lineinfile:
    path: /ansible/inventory/prod/windows_template.ini
    insertafter: "^\\[windows_template\\]$"
    line: "{{ vm_ip_address }}"
  delegate_to: localhost

- name: Wait for WinRM service to be accessible
  local_action:
    module: wait_for
    host: "{{ vm_ip_address }}"
    port: "{{ ANSIBLE_PORT }}"
    delay: 60
    state: started
  register: wait_result
